{"version":3,"sources":["tictactoe.js","tictactoe-ai.js","index.js"],"names":["TicTacToe","size","Error","this","_size","reset","ret","_turn","turn","i","_squares","length","Array","fill","startIx","stride","symbol","score","cIx","checks","ix","push","playerSymbol","_getChecks","maxScore","_scoreSegment","reduce","count","sym","getTurnSymbol","countPlayerSymbols","forEach","Math","floor","isValidMove","to","getSquareSymbol","validMoves","getValidMoves","validMove","from","aMove","Number","isInteger","move","undefined","doNegimaxMove","tttGame","TypeError","getNegiMaxMove","isArray","doMove","console","log","random","doRandomMove","depth","maxDepth","tieMoves","scoreMove","tttGameCopy","opponentMove","abs","sort","a","b","pop","getScore","Zquare","props","state","value","className","onClick","React","Component","Board","sizes","getInitialState","aiPlayerSymbol","game","doNada","handleClick","setState","constructState","checkWinner","isPlayerTurn","thisObject","setTimeout","start","range","keys","map","renderSquare","status","winner","renderRow","name","onChange","event","setSize","target","opt","id","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6032fe2a.chunk.js","sourcesContent":["export class TicTacToe {\r\n  #_size\r\n  #_turn\r\n  #_squares\r\n\r\n  constructor(size) {\r\n    if (size < 3 || size % 2 !== 1) {\r\n      throw new Error(`The argument size: '${size}' is not valid for tic tac toe (3, 5, 7, ...)`) \r\n    }\r\n    this._size = size\r\n    this.reset()\r\n  }\r\n\r\n  get size() {\r\n    return this._size\r\n  }\r\n\r\n  from() {\r\n    const ret = new TicTacToe(this.size)\r\n    ret._turn = this.turn\r\n    for (let i = 0; i < this._squares.length; i++) {\r\n      ret._squares[i] = this._squares[i]\r\n    }\r\n\r\n    return ret\r\n  }\r\n\r\n  reset() {\r\n    this._turn = 0\r\n    this._squares = Array(this.size * this.size).fill(null)\r\n  }\r\n\r\n  _scoreSegment(startIx, stride, length, symbol = this._squares[startIx]) {\r\n    const _squares = this._squares\r\n    let score = 0\r\n      \r\n    for (let cIx = 0; cIx < length; cIx++, startIx += stride) {\r\n      if (symbol === _squares[startIx]) {\r\n        score++\r\n      }\r\n    }\r\n\r\n    return score\r\n  }\r\n\r\n  _getChecks() {\r\n    const size = this.size\r\n    // checks array with start and stride parameters\r\n    let checks = [[0, size + 1], [size - 1, size - 1]]  // the diagonal checks\r\n\r\n    // add all rows and col checks\r\n    for (let ix = 0; ix < size; ix++) {\r\n      checks.push([ix * size, 1])\r\n      checks.push([ix, size])\r\n    }\r\n\r\n    return checks\r\n  }\r\n\r\n  getScore(playerSymbol) {\r\n    const checks = this._getChecks()\r\n    let maxScore = 0\r\n    const size = this.size\r\n\r\n    for (let cIx = 0; cIx < checks.length; cIx++) {\r\n      const score = this._scoreSegment(checks[cIx][0], checks[cIx][1], size, playerSymbol)\r\n      if (score > maxScore) {\r\n        maxScore = score\r\n      }\r\n    }\r\n\r\n    return maxScore\r\n  }\r\n\r\n  checkWinner() {\r\n    const size = this.size\r\n    const checks = this._getChecks()\r\n    \r\n\r\n    // perform the checks\r\n    for (let cIx = 0; cIx < checks.length; cIx++) {\r\n      if (this._scoreSegment(checks[cIx][0], checks[cIx][1], size) === size) {\r\n        return this._squares[checks[cIx][0]]\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  get turn() {\r\n    return this._turn\r\n  }\r\n\r\n  getTurnSymbol(turn = this.turn) {\r\n    return turn % 2 === 0 ? 'X' : 'O'\r\n  }\r\n\r\n  getSquareSymbol(ix) {\r\n    return this._squares[ix]\r\n  }\r\n\r\n  countPlayerSymbols(symbol) {\r\n    return this._squares.reduce((count, sym) => sym === symbol ? count + 1 : count, 0)\r\n  }\r\n\r\n  getValidMoves() {\r\n    const playerSymbol = this.getTurnSymbol()\r\n    const allTokensUsed = this.countPlayerSymbols(playerSymbol) >= this.size\r\n\r\n    function isValidMove(ix, turn, _squares) {\r\n      if (turn === 0 && ix === Math.floor(_squares.length / 2)) {\r\n        return false\r\n      }\r\n  \r\n      return _squares[ix] === null\r\n    }\r\n\r\n    if (allTokensUsed) {\r\n      // first remove one token, then get all free squares\r\n      const ret = []\r\n      for(let i = 0; i < this._squares.length; i++) {\r\n        if (this.getSquareSymbol(i) === playerSymbol) {\r\n          this._squares[i] = null;\r\n          const validMoves = this.getValidMoves() // fetches an array of arrays with valid moves\r\n          this._squares[i] = playerSymbol\r\n\r\n          validMoves.forEach((validMove) => {\r\n            if (i !== validMove.to) {\r\n              ret.push({ from: i, to: validMove.to }) // first i must be removed and then moved to ix\r\n            }\r\n          })\r\n        }\r\n      }\r\n      return ret\r\n    } else {\r\n      // all free squares are valid moves\r\n      const ret = []\r\n      this._squares.forEach((symbol, ix) => {\r\n        if (isValidMove(ix, this.turn, this._squares)) {\r\n          ret.push({to:ix})\r\n        }\r\n      })\r\n\r\n      return ret\r\n    }\r\n  }\r\n\r\n  doMove(aMove) {\r\n    if (Number.isInteger(aMove)) {\r\n      aMove = this._squares[aMove] === null ? {to: aMove} : {from:aMove}\r\n    }\r\n    const validMoves = this.getValidMoves()\r\n    \r\n    for (let move of validMoves) {\r\n    \r\n      if ((aMove.from === move.from) && (aMove.to === undefined || aMove.to === move.to)) {\r\n        if (aMove.from !== undefined) {\r\n          this._squares[aMove.from] = null\r\n        }\r\n        if (aMove.to !== undefined) {\r\n          this._squares[aMove.to] = this.getTurnSymbol()\r\n          this._turn++\r\n        }\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n  \r\n}","import { TicTacToe } from \"./tictactoe\"\r\n\r\nexport function doRandomMove(tttGame) {\r\n  if (!tttGame instanceof TicTacToe) {\r\n    throw new TypeError('argument tttGame is not an instance of TicTacToe')\r\n  }\r\n\r\n  const validMoves = tttGame.getValidMoves()\r\n  let validMove\r\n  do {\r\n    validMove = validMoves[Math.floor(Math.random() * validMoves.length)]\r\n  } while (validMove[0] === validMove[1]) // we discard movement from and to the same square\r\n  tttGame.doMove(validMove)\r\n}\r\n\r\nexport function doNegimaxMove(tttGame) {\r\n  if (!tttGame instanceof TicTacToe) {\r\n    throw new TypeError('argument tttGame is not an instance of TicTacToe')\r\n  }\r\n\r\n  const tttGameCopy = tttGame.from()\r\n  const maxDepth = tttGame.size < 5 ? 6 : 2\r\n  const validMove = getNegiMaxMove(tttGameCopy, 0, maxDepth)\r\n  if (Array.isArray(validMove)) {\r\n    tttGame.doMove(validMove[1])\r\n  } else {\r\n    console.log(\"AI is screwed... doing random move\")\r\n    doRandomMove(tttGame)\r\n  }\r\n  \r\n}\r\n\r\nfunction getNegiMaxMove(tttGame, depth, maxDepth) {\r\n\r\n  const validMoves = tttGame.getValidMoves()\r\n\r\n  const tieMoves = []\r\n\r\n  for (let i = 0; i < validMoves.length; i++) {\r\n    const score = scoreMove(tttGame.from(), validMoves[i])\r\n    if (score === tttGame.size) {\r\n      // this would be a win for me so I would go for it\r\n      return [tttGame.size, validMoves[i]]\r\n    } else {\r\n      // I'm not a winner by this move so better check what the opponent would do if I did this\r\n      if (depth + 1 < maxDepth) {\r\n        const tttGameCopy = tttGame.from()\r\n        tttGameCopy.doMove(validMoves[i])\r\n\r\n        const opponentMove = getNegiMaxMove(tttGameCopy, depth + 1, maxDepth)\r\n        if (Array.isArray(opponentMove)) {\r\n          // opponent does not seem to be able to win if I do this so we have a potential move\r\n          if (Math.abs(opponentMove[0]) < tttGame.size) {\r\n            tieMoves.push([-opponentMove[0], validMoves[i]]) // score is negated i.e negimax\r\n          }\r\n        } else {\r\n          // opponent has no valid moves this is good\r\n          return [tttGame.size, validMoves[i]]\r\n        }\r\n      } else {\r\n        // recursion depth met so we must take a chance on this\r\n        tieMoves.push([0, validMoves[i]])\r\n      }\r\n    }\r\n  }\r\n\r\n  // select a random move among the higest performing moves\r\n  tieMoves.sort((a, b) => b - a)\r\n  if (tieMoves.length > 1) {\r\n    while(tieMoves[0][0] !== tieMoves[tieMoves.length - 1][0]) {\r\n      tieMoves.pop()\r\n    }\r\n  }\r\n  return tieMoves[Math.floor(Math.random() * tieMoves.length)]\r\n}\r\n\r\nfunction scoreMove(tttGame, validMove) {\r\n  const playerSymbol = tttGame.getTurnSymbol()\r\n  tttGame.doMove(validMove)\r\n  return tttGame.getScore(playerSymbol)\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport { doNegimaxMove } from './tictactoe-ai'\r\nimport {TicTacToe} from './tictactoe.js'\r\n\r\nclass Zquare extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      value: null\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <button className=\"square\" onClick={() => this.props.onClick()}>\r\n        {this.props.value}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.size = 0 // decides the side 0 -> 3x3 etc\r\n    this.sizes = [[3, '3x3'], [5, '5x5'], [7, '7x7'], [9, '9x9']]\r\n    \r\n    this.state = this.getInitialState()\r\n\r\n    this.aiPlayerSymbol = this.state.game.getTurnSymbol(1)\r\n\r\n  }\r\n  renderSquare(i, doNada) {\r\n    return <Zquare value={this.state.game.getSquareSymbol(i)}\r\n             onClick={()=> doNada ? this.doNada() : this.handleClick(i)}\r\n             key={i}/>\r\n  }\r\n\r\n  doNada() {\r\n\r\n  }\r\n\r\n  constructState(game) {\r\n    return {game: game}\r\n  }\r\n\r\n  isPlayerTurn(game, playerSymbol) {\r\n    return game.getTurnSymbol() === playerSymbol\r\n  }\r\n  \r\n  handleClick(i) {\r\n    if (this.state.game.doMove(i)) {\r\n      \r\n      this.setState(this.constructState(this.state.game))\r\n\r\n      if (!this.state.game.checkWinner() && this.isPlayerTurn(this.state.game, this.aiPlayerSymbol)) {\r\n        const game = this.state.game\r\n        const thisObject = this\r\n        setTimeout( function () {\r\n          // now we do the \"ai\" move\r\n          //doRandomMove(game)\r\n          doNegimaxMove(game)\r\n          thisObject.setState(thisObject.constructState(thisObject.state.game))\r\n        }, 2000)\r\n      }\r\n    }\r\n  }\r\n  \r\n  renderRow(start, length, doNada) {\r\n    const range = [...Array(length).keys()]\r\n    return (\r\n       <div className=\"board-row\" key={start}>\r\n         { range.map((i) => this.renderSquare(start + i, doNada))}\r\n       </div>\r\n    )\r\n  }\r\n\r\n  getInitialState() {\r\n    return this.constructState(new TicTacToe(this.sizes[this.size][0]))\r\n  }\r\n\r\n  reset() {\r\n    this.setState(this.getInitialState())\r\n  }\r\n\r\n  setSize(size) {\r\n    for (let i = 0; i < this.sizes.length; i++) {\r\n      if (size === this.sizes[i][1]) {\r\n        this.size = i\r\n      }\r\n    }\r\n\r\n    this.setState(this.constructState(this.state.game))  // force a render, possibly the size should be a state\r\n  }\r\n\r\n  render() {\r\n    let status = `Turn: ${this.state.game.turn + 1} Next Player: ${this.state.game.getTurnSymbol()}`\r\n    const winner = this.state.game.checkWinner()\r\n    const size = this.state.game.size\r\n    if (winner) {\r\n      status = `Winner is: ${winner} at Turn: ${this.state.game.turn}`\r\n    }\r\n    const range = [...Array(size).keys()]\r\n    return (\r\n      <div>\r\n        <div className=\"status\">{status}</div>\r\n          { range.map((i) => this.renderRow(i * size, size, winner || this.isPlayerTurn(this.state.game, this.aiPlayerSymbol))) }\r\n\r\n          <div className=\"controls\">\r\n            <button onClick={() => this.reset()}>\r\n              Reset game\r\n            </button>\r\n            <select name=\"game_size\" value={this.sizes[this.size][1]} onChange={event => this.setSize(event.target.value)}>\r\n              {this.sizes.map(opt => {return(<option id=\"{opt[0]}\" key={opt[0]}>{opt[1]}</option>)})}\r\n            </select>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board size={'5x5'}/>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{/* status */}</div>\r\n          <ol>{/* TODO */}</ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}