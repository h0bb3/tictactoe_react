{"version":3,"sources":["components/game/tictactoe-ai.worker.js","components/game/tictactoe-ai-worker-wrapper.js","components/highscores/highscores-component.js","components/nameform/nameform-component.js","components/board/board-component.js","model/highscores.js","model/tictactoe.js","model/tictactoe-ai.js","components/game/game-component.js","index.js"],"names":["Worker_fn","Worker","__webpack_public_path__","AiWorkerWrapper","this","worker","AiWorker","data","postMessage","msg","callback","addEventListener","HighscoresComponent","props","className","scores","map","score","ix","name","timeToString","time","scoreTime","split","month","date","year","NameFormComponent","state","value","event","setState","target","preventDefault","onNameSubmitted","onSubmit","handleSubmit","type","onChange","handleChange","React","Component","Zquare","onClick","BoardComponent","i","doNada","getSquareSymbol","handleClick","start","length","range","Array","keys","renderSquare","size","renderRow","Highscores","_scores","localStorage","getItem","JSON","parse","push","Date","sort","a","b","_save","setItem","stringify","TicTacToe","Error","_size","reset","_turn","_squares","ret","turn","fill","startIx","stride","symbol","cIx","checks","playerSymbol","_getChecks","maxScore","_scoreSegment","reduce","count","sym","getTurnSymbol","countPlayerSymbols","forEach","Math","floor","isValidMove","to","validMoves","getValidMoves","validMove","from","aMove","Number","isInteger","move","undefined","squares","sqrt","doNegimaxMove","tttGame","TypeError","getNegiMaxMove","isArray","console","log","random","doRandomMove","depth","maxDepth","tieMoves","scoreMove","tttGameCopy","doMove","opponentMove","abs","pop","getScore","Status","status","ButtonComponent","text","Game","game","aiWorker","onBoardClick","squareIx","oldTurn","onGameUpdate","checkWinner","isAITurn","noAITimer","setTimeout","gameSquares","winner","newScore","addScore","resetGame","resetHighscores","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba692f31.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/tictactoe-ai.worker.bd4a8cda.worker.js\");\n}\n","import AiWorker from './tictactoe-ai.worker'\r\n\r\nexport class AiWorkerWrapper {\r\n  constructor() {\r\n    this.worker = new AiWorker()\r\n  }\r\n\r\n  postMessage(data) {\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  addEventListener(msg, callback) {\r\n    this.worker.addEventListener(msg, callback)\r\n  }\r\n}","import React from 'react'\r\n\r\nimport './highscores-component.css'\r\nexport function HighscoresComponent(props) {\r\n\r\n  return (\r\n    <div className=\"highscores\">\r\n      <h2>Highscores</h2>\r\n      <div className=\"centering\">\r\n      <table>\r\n        <thead><tr><th>Score</th><th>Name</th><th>Date</th></tr></thead>\r\n        <tbody>\r\n        {props.scores.scores.map((score, ix) => {return(<tr className=\"score-row\" key={ix}><td>{score.score}</td><td>{score.name}</td><td>{timeToString(score.time)}</td></tr>)})}\r\n        </tbody>\r\n      </table>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction timeToString(scoreTime) {\r\n  const [, month, date, year, time] = scoreTime.split(\" \")\r\n  return `${date} ${month} ${year} - ${time}` // to avoid unused var problem in eslint\r\n}","import React from 'react'\r\n\r\nexport class NameFormComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {value: ''}\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value})\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault()\r\n    if (this.props.onNameSubmitted) {\r\n      this.props.onNameSubmitted(this.state.value)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>You Made it to the Highscores</h2>\r\n      <form onSubmit={(event) => {return this.handleSubmit(event)}}>\r\n        <label>\r\n          Enter Name: \r\n          <input type=\"text\" value={this.state.value} onChange={(event) => {return this.handleChange(event)}} />\r\n        </label>\r\n      </form>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react'\r\nimport './board-component.css'\r\n\r\nclass Zquare extends React.Component {\r\n  \r\n  render() {\r\n    return (\r\n      <button className=\"square\" onClick={() => this.props.onClick()}>\r\n        {this.props.value}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nexport class BoardComponent extends React.Component {\r\n  renderSquare(i, doNada) {\r\n    return <Zquare value={this.props.getSquareSymbol(i)}\r\n             onClick={()=> doNada ? this.doNada() : this.handleClick(i)}\r\n             key={i}/>\r\n  }\r\n\r\n  doNada() {\r\n\r\n  }\r\n  \r\n  handleClick(i) {\r\n    this.props.onClick(i)\r\n  }\r\n  \r\n  renderRow(start, length, doNada) {\r\n    const range = [...Array(length).keys()]\r\n    return (\r\n       <div className=\"board-row\" key={start}>\r\n         { range.map((i) => this.renderSquare(start + i, doNada))}\r\n       </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    \r\n    const doNada = !this.props.onClick\r\n    const size = this.props.size\r\n\r\n    const range = [...Array(size).keys()]\r\n    return (\r\n      <div className=\"game-board\">\r\n      <div>\r\n          { range.map((i) => this.renderRow(i * size, size, doNada)) }\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n}","\r\nexport class Highscores {\r\n  #_scores\r\n\r\n  constructor() {\r\n    this._scores = localStorage.getItem('scores') ? JSON.parse(localStorage.getItem('scores')) : [];\r\n  }\r\n\r\n  addScore(score, name) {\r\n    this._scores.push({score:score, name:name, time:Date()})\r\n    this._scores.sort((a, b) => {return b.score - a.score})\r\n    this._save()\r\n  }\r\n\r\n  get scores() {\r\n    return [...this._scores]\r\n  }\r\n\r\n  _save() {\r\n    localStorage.setItem('scores', JSON.stringify(this._scores))\r\n  }\r\n\r\n  reset() {\r\n    this._scores = []\r\n    this._save()\r\n  }\r\n}","export class TicTacToe {\r\n  constructor(size) {\r\n    if (size < 3 || size % 2 !== 1) {\r\n      throw new Error(`The argument size: '${size}' is not valid for tic tac toe (3, 5, 7, ...)`) \r\n    }\r\n    this._size = size\r\n    this.reset()\r\n  }\r\n\r\n  get size() {\r\n    return this._size\r\n  }\r\n\r\n  get turn() {\r\n    return this._turn\r\n  }\r\n\r\n  get squares() {\r\n    return [...this._squares]\r\n  }\r\n\r\n  static createFrom(squares, turn) {\r\n    const ret = new TicTacToe(Math.floor(Math.sqrt(squares.length)))\r\n    ret._turn = turn\r\n    if (ret._squares.length !== squares.length) {\r\n      throw new Error(`The argument squares length: '${squares.length}' is not valid for tic tac toe (9, 25, 49, ...)`) \r\n    }\r\n    for (let i = 0; i < squares.length; i++) {\r\n      ret._squares[i] = squares[i]\r\n    }\r\n\r\n    return ret\r\n  }\r\n\r\n  from() {\r\n    const ret = new TicTacToe(this.size)\r\n    ret._turn = this.turn\r\n    for (let i = 0; i < this._squares.length; i++) {\r\n      ret._squares[i] = this._squares[i]\r\n    }\r\n\r\n    return ret\r\n  }\r\n\r\n  reset() {\r\n    this._turn = 0\r\n    this._squares = Array(this.size * this.size).fill(null)\r\n  }\r\n\r\n  _scoreSegment(startIx, stride, length, symbol = this._squares[startIx]) {\r\n    const _squares = this._squares\r\n    let score = 0\r\n      \r\n    for (let cIx = 0; cIx < length; cIx++, startIx += stride) {\r\n      if (symbol === _squares[startIx]) {\r\n        score++\r\n      }\r\n    }\r\n\r\n    return score\r\n  }\r\n\r\n  _getChecks() {\r\n    const size = this.size\r\n    // checks array with start and stride parameters\r\n    let checks = [[0, size + 1], [size - 1, size - 1]]  // the diagonal checks\r\n\r\n    // add all rows and col checks\r\n    for (let ix = 0; ix < size; ix++) {\r\n      checks.push([ix * size, 1])\r\n      checks.push([ix, size])\r\n    }\r\n\r\n    return checks\r\n  }\r\n\r\n  getScore(playerSymbol) {\r\n    const checks = this._getChecks()\r\n    let maxScore = 0\r\n    const size = this.size\r\n\r\n    for (let cIx = 0; cIx < checks.length; cIx++) {\r\n      const score = this._scoreSegment(checks[cIx][0], checks[cIx][1], size, playerSymbol)\r\n      if (score > maxScore) {\r\n        maxScore = score\r\n      }\r\n    }\r\n\r\n    return maxScore\r\n  }\r\n\r\n  checkWinner() {\r\n    const size = this.size\r\n    const checks = this._getChecks()\r\n    \r\n\r\n    // perform the checks\r\n    for (let cIx = 0; cIx < checks.length; cIx++) {\r\n      if (this._scoreSegment(checks[cIx][0], checks[cIx][1], size) === size) {\r\n        return this._squares[checks[cIx][0]]\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  getTurnSymbol(turn = this.turn) {\r\n    return turn % 2 === 0 ? 'X' : 'O'\r\n  }\r\n\r\n  getSquareSymbol(ix) {\r\n    return this._squares[ix]\r\n  }\r\n\r\n  countPlayerSymbols(symbol) {\r\n    return this._squares.reduce((count, sym) => sym === symbol ? count + 1 : count, 0)\r\n  }\r\n\r\n  getValidMoves() {\r\n    const playerSymbol = this.getTurnSymbol()\r\n    const allTokensUsed = this.countPlayerSymbols(playerSymbol) >= this.size\r\n\r\n    function isValidMove(ix, turn, _squares) {\r\n      if (turn === 0 && ix === Math.floor(_squares.length / 2)) {\r\n        return false\r\n      }\r\n  \r\n      return _squares[ix] === null\r\n    }\r\n\r\n    if (allTokensUsed) {\r\n      // first remove one token, then get all free squares\r\n      const ret = []\r\n      for(let i = 0; i < this._squares.length; i++) {\r\n        if (this.getSquareSymbol(i) === playerSymbol) {\r\n          this._squares[i] = null;\r\n          const validMoves = this.getValidMoves() // fetches an array of arrays with valid moves\r\n          this._squares[i] = playerSymbol\r\n\r\n          validMoves.forEach((validMove) => {\r\n            if (i !== validMove.to) {\r\n              ret.push({ from: i, to: validMove.to }) // first i must be removed and then moved to ix\r\n            }\r\n          })\r\n        }\r\n      }\r\n      return ret\r\n    } else {\r\n      // all free squares are valid moves\r\n      const ret = []\r\n      this._squares.forEach((symbol, ix) => {\r\n        if (isValidMove(ix, this.turn, this._squares)) {\r\n          ret.push({to:ix})\r\n        }\r\n      })\r\n\r\n      return ret\r\n    }\r\n  }\r\n\r\n  doMove(aMove) {\r\n    if (Number.isInteger(aMove)) {\r\n      aMove = this._squares[aMove] === null ? {to: aMove} : {from:aMove}\r\n    }\r\n    const validMoves = this.getValidMoves()\r\n    \r\n    for (let move of validMoves) {\r\n    \r\n      if (aMove.from === move.from && (aMove.to === undefined || aMove.to === move.to)) {\r\n        if (aMove.from !== undefined) {\r\n          this._squares[aMove.from] = null\r\n        }\r\n        if (aMove.to !== undefined) {\r\n          this._squares[aMove.to] = this.getTurnSymbol()\r\n          this._turn++\r\n        }\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n  \r\n}","import { TicTacToe } from \"./tictactoe\"\r\n\r\nexport function doRandomMove(tttGame) {\r\n  if (!tttGame instanceof TicTacToe) {\r\n    throw new TypeError('argument tttGame is not an instance of TicTacToe')\r\n  }\r\n\r\n  const validMoves = tttGame.getValidMoves()\r\n  let validMove\r\n  do {\r\n    validMove = validMoves[Math.floor(Math.random() * validMoves.length)]\r\n  } while (validMove.to === validMove.from) // we discard movement from and to the same square\r\n  return validMove\r\n}\r\n\r\nexport function doNegimaxMove(tttGame) {\r\n  if (!tttGame instanceof TicTacToe) {\r\n    throw new TypeError('argument tttGame is not an instance of TicTacToe')\r\n  }\r\n\r\n\r\n  const tttGameCopy = tttGame.from()\r\n  const maxDepth = tttGame.size < 5 ? 6 : 2\r\n  const validMove = getNegiMaxMove(tttGameCopy, 0, maxDepth)\r\n  if (Array.isArray(validMove)) {\r\n    return validMove[1]\r\n  } \r\n  \r\n  console.log(\"AI is screwed... doing random move\")\r\n  return doRandomMove(tttGame)\r\n  \r\n}\r\n\r\nfunction getNegiMaxMove(tttGame, depth, maxDepth) {\r\n\r\n  const validMoves = tttGame.getValidMoves()\r\n\r\n  const tieMoves = []\r\n\r\n  for (let i = 0; i < validMoves.length; i++) {\r\n    const score = scoreMove(tttGame.from(), validMoves[i])\r\n    if (score === tttGame.size) {\r\n      // this would be a win for me so I would go for it\r\n      return [tttGame.size, validMoves[i]]\r\n    } else {\r\n      // I'm not a winner by this move so better check what the opponent would do if I did this\r\n      if (depth + 1 < maxDepth) {\r\n        const tttGameCopy = tttGame.from()\r\n        tttGameCopy.doMove(validMoves[i])\r\n\r\n        const opponentMove = getNegiMaxMove(tttGameCopy, depth + 1, maxDepth)\r\n        if (Array.isArray(opponentMove)) {\r\n          // opponent does not seem to be able to win if I do this so we have a potential move\r\n          if (Math.abs(opponentMove[0]) < tttGame.size) {\r\n            tieMoves.push([-opponentMove[0], validMoves[i]]) // score is negated i.e negimax\r\n          }\r\n        } else {\r\n          // opponent has no valid moves this is good\r\n          return [tttGame.size, validMoves[i]]\r\n        }\r\n      } else {\r\n        // recursion depth met so we must take a chance on this\r\n        tieMoves.push([0, validMoves[i]])\r\n      }\r\n    }\r\n  }\r\n\r\n  // select a random move among the higest performing moves\r\n  tieMoves.sort((a, b) => b - a)\r\n  if (tieMoves.length > 1) {\r\n    while(tieMoves[0][0] !== tieMoves[tieMoves.length - 1][0]) {\r\n      tieMoves.pop()\r\n    }\r\n  }\r\n  return tieMoves[Math.floor(Math.random() * tieMoves.length)]\r\n}\r\n\r\nfunction scoreMove(tttGame, validMove) {\r\n  const playerSymbol = tttGame.getTurnSymbol()\r\n  tttGame.doMove(validMove)\r\n  return tttGame.getScore(playerSymbol)\r\n}","import React from 'react'\r\nimport './game-component.css'\r\nimport {AiWorkerWrapper} from './tictactoe-ai-worker-wrapper'\r\nimport {HighscoresComponent} from '../highscores/highscores-component'\r\nimport {NameFormComponent} from '../nameform/nameform-component'\r\nimport {BoardComponent} from '../board/board-component'\r\nimport {Highscores} from '../../model/highscores'\r\nimport { TicTacToe } from '../../model/tictactoe'\r\nimport { doNegimaxMove } from '../../model/tictactoe-ai'\r\n\r\n\r\nfunction Status(props) {\r\n  return (\r\n    <div>{props.status}</div>\r\n  )\r\n}\r\n\r\nfunction ButtonComponent(props) {\r\n  return (\r\n    <button onClick={props.onClick}>\r\n      {props.text}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport class Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      status: \"Game Not Started\",\r\n      scores: new Highscores(),\r\n      game: new TicTacToe(3)\r\n    }\r\n\r\n    this.aiWorker = new AiWorkerWrapper()\r\n    this.aiWorker.addEventListener('message', (event) => {this.onBoardClick(event.data.ix)});\r\n  }\r\n\r\n  onBoardClick(squareIx) {\r\n    const oldTurn = this.state.game.turn\r\n    if (this.state.game.doMove(squareIx)) {\r\n      \r\n      this.onGameUpdate(this.state.game)\r\n      \r\n      // the ai may send 1 click (to remove a symbol) then we should not start the ai again\r\n      // so we need to check that the turn has gone from human to ai\r\n      if (!this.state.game.checkWinner() && this.isAITurn() && oldTurn !== this.state.game.turn) {\r\n        const game = this.state.game\r\n        \r\n        if (this.props.noAITimer) {\r\n          const move = doNegimaxMove(game)\r\n          game.doMove(move)\r\n          this.onGameUpdate(this.state.game)\r\n        } else {\r\n          // this simulates some thinking time that makes the experience better\r\n          setTimeout( () => {\r\n            this.aiWorker.postMessage({gameSquares: game.squares, turn: game.turn})\r\n          }, 2000)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  onGameUpdate(tttGame) {\r\n    const winner = tttGame.checkWinner()\r\n    let newScore = this.state.newScore\r\n    if (winner) {\r\n      newScore = tttGame.turn\r\n    }\r\n\r\n    this.setState({game: tttGame, scores: this.state.scores, newScore: newScore})\r\n  }\r\n\r\n  onNameSubmitted(name) {\r\n    this.state.scores.addScore(this.state.newScore, name)\r\n    this.setState({game: this.state.game, scores: this.state.scores, newScore: undefined})\r\n  }\r\n  \r\n  isAITurn() {\r\n    const game = this.state.game\r\n    return game.getTurnSymbol() === game.getTurnSymbol(1)\r\n  }\r\n\r\n  resetGame() {\r\n    this.setState({game: new TicTacToe(this.state.game.size), scores: this.state.scores, newScore: undefined})\r\n  }\r\n\r\n  resetHighscores() {\r\n    this.state.scores.reset()\r\n    this.setState({game: this.state.game, scores: this.state.scores, newScore: undefined})\r\n  }\r\n\r\n  render() {\r\n    const game = this.state.game\r\n    let status = `Turn: ${game.turn + 1} Next Player: ${game.getTurnSymbol()}`\r\n\r\n    const winner = game.checkWinner()\r\n    if (winner) {\r\n      status = `Winner is: ${winner} at Turn: ${game.turn}`\r\n    }\r\n\r\n    const onClick = game.checkWinner() || this.isAITurn() || this.state.newScore ? undefined : (squareIx) => {this.onBoardClick(squareIx)}\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-info\">\r\n          <Status status={status}/>  \r\n        </div>\r\n        <BoardComponent onClick={onClick} size={game.size} getSquareSymbol={(squareIx) => {return game.getSquareSymbol(squareIx)}}/>\r\n        <div className=\"controls\">\r\n        <ButtonComponent text=\"Reset Game\" onClick={() => {this.resetGame()}}/>\r\n        </div>\r\n        \r\n        {this.state.newScore ? <NameFormComponent onNameSubmitted={(name) => {this.onNameSubmitted(name)}}/>:''}\r\n        <HighscoresComponent scores={this.state.scores} />\r\n        <div className=\"controls\">\r\n        <ButtonComponent text=\"Reset Highscores\" onClick={() => {this.resetHighscores()}}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {Game} from './components/game/game-component'\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}