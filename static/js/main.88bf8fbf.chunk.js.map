{"version":3,"sources":["tictactoe.js","tictactoe-ai.js","index.js"],"names":["TicTacToe","size","Error","this","_size","reset","ret","_turn","turn","i","squares","length","Array","fill","startIx","stride","symbol","score","cIx","checks","ix","push","playerSymbol","_getChecks","maxScore","_scoreSegment","reduce","count","sym","getTurnSymbol","countPlayerSymbols","forEach","Math","floor","isValidMove","getSquareSymbol","validMoves","getValidMoves","validMove","aMove","isArray","move","value","doNegimaxMove","tttGame","TypeError","getNegiMaxMove","from","doMove","console","log","random","doRandomMove","depth","maxDepth","tieMoves","scoreMove","tttGameCopy","opponentMove","abs","sort","a","b","pop","getScore","Zquare","props","state","className","onClick","React","Component","Board","sizes","getInitialState","aiPlayerSymbol","game","doNada","handleClick","setState","constructState","checkWinner","isPlayerTurn","thisObject","setTimeout","start","range","keys","map","renderSquare","status","winner","renderRow","name","onChange","event","setSize","target","opt","id","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88bf8fbf.chunk.js","sourcesContent":["export class TicTacToe {\r\n  #_size\r\n  #_turn\r\n  #squares\r\n\r\n  constructor(size) {\r\n    if (size < 3 || size % 2 !== 1) {\r\n      throw new Error(`The argument size: '${size}' is not valid for tic tac toe (3, 5, 7, ...)`) \r\n    }\r\n    this._size = size\r\n    this.reset()\r\n  }\r\n\r\n  get size() {\r\n    return this._size\r\n  }\r\n\r\n  from() {\r\n    const ret = new TicTacToe(this.size)\r\n    ret._turn = this.turn\r\n    for (let i = 0; i < this.squares.length; i++) {\r\n      ret.squares[i] = this.squares[i]\r\n    }\r\n\r\n    return ret\r\n  }\r\n\r\n  reset() {\r\n    this._turn = 0\r\n    this.squares = Array(this.size * this.size).fill(null)\r\n  }\r\n\r\n  _scoreSegment(startIx, stride, length, symbol = this.squares[startIx]) {\r\n    const squares = this.squares\r\n    let score = 0\r\n      \r\n    for (let cIx = 0; cIx < length; cIx++, startIx += stride) {\r\n      if (symbol === squares[startIx]) {\r\n        score++\r\n      }\r\n    }\r\n\r\n    return score\r\n  }\r\n\r\n  _getChecks() {\r\n    const size = this.size\r\n    // checks array with start and stride parameters\r\n    let checks = [[0, size + 1], [size - 1, size - 1]]  // the diagonal checks\r\n\r\n    // add all rows and col checks\r\n    for (let ix = 0; ix < size; ix++) {\r\n      checks.push([ix * size, 1])\r\n      checks.push([ix, size])\r\n    }\r\n\r\n    return checks\r\n  }\r\n\r\n  getScore(playerSymbol) {\r\n    const checks = this._getChecks()\r\n    let maxScore = 0\r\n    const size = this.size\r\n\r\n    for (let cIx = 0; cIx < checks.length; cIx++) {\r\n      const score = this._scoreSegment(checks[cIx][0], checks[cIx][1], size, playerSymbol)\r\n      if (score > maxScore) {\r\n        maxScore = score\r\n      }\r\n    }\r\n\r\n    return maxScore\r\n  }\r\n\r\n  checkWinner() {\r\n    const size = this.size\r\n    const checks = this._getChecks()\r\n    \r\n\r\n    // perform the checks\r\n    for (let cIx = 0; cIx < checks.length; cIx++) {\r\n      if (this._scoreSegment(checks[cIx][0], checks[cIx][1], size) === size) {\r\n        return this.squares[checks[cIx][0]]\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  get turn() {\r\n    return this._turn\r\n  }\r\n\r\n  getTurnSymbol(turn = this.turn) {\r\n    return turn % 2 === 0 ? 'X' : 'O'\r\n  }\r\n\r\n  getSquareSymbol(ix) {\r\n    return this.squares[ix]\r\n  }\r\n\r\n  countPlayerSymbols(symbol) {\r\n    return this.squares.reduce((count, sym) => sym === symbol ? count + 1 : count, 0)\r\n  }\r\n\r\n  getValidMoves() {\r\n    const playerSymbol = this.getTurnSymbol()\r\n    const allTokensUsed = this.countPlayerSymbols(playerSymbol) >= this.size\r\n\r\n    function isValidMove(ix, turn, squares) {\r\n      if (turn === 0 && ix === Math.floor(squares.length / 2)) {\r\n        return false\r\n      }\r\n  \r\n      return squares[ix] === null\r\n    }\r\n\r\n    if (allTokensUsed) {\r\n      // first remove one token, then get all free squares\r\n      const ret = []\r\n      for(let i = 0; i < this.squares.length; i++) {\r\n        if (this.getSquareSymbol(i) === playerSymbol) {\r\n          this.squares[i] = null;\r\n          const validMoves = this.getValidMoves() // fetches an array of arrays with valid moves\r\n          this.squares[i] = playerSymbol\r\n\r\n          validMoves.forEach((validMove) => {\r\n            if (i !== validMove[0]) {\r\n              ret.push([ i, validMove[0] ]) // first i must be removed and then moved to ix\r\n            }\r\n          })\r\n        }\r\n      }\r\n      return ret\r\n    } else {\r\n      // all free squares are valid moves\r\n      const ret = []\r\n      this.squares.forEach((symbol, ix) => {\r\n        if (isValidMove(ix, this.turn, this.squares)) {\r\n          ret.push([ix])\r\n        }\r\n      })\r\n\r\n      return ret\r\n    }\r\n  }\r\n\r\n  doMove(aMove) {\r\n    if (!Array.isArray(aMove)) {\r\n      aMove = [aMove]\r\n    }\r\n    const validMoves = this.getValidMoves()\r\n    for (let move of validMoves) {\r\n      if (aMove.length === 2) {\r\n        if (move.length === 2 && aMove[0] === move[0] && aMove[1] === move[1]) {\r\n          this.squares[aMove[0]] = null\r\n          this.squares[aMove[1]] = this.getTurnSymbol()\r\n          this._turn++\r\n        }\r\n      } else {\r\n        if (move[0] === aMove[0]) {\r\n          const ix = aMove[0]\r\n          if (this.squares[ix] === null) {\r\n            this.squares[ix] = this.getTurnSymbol()\r\n            this._turn++\r\n          } else {\r\n            this.squares[ix] = null\r\n          }\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _setSquare(ix, value = this.getTurnSymbol()) {\r\n    this.squares[ix] = value\r\n  }\r\n  \r\n}","import { TicTacToe } from \"./tictactoe\"\r\n\r\nexport function doRandomMove(tttGame) {\r\n  if (!tttGame instanceof TicTacToe) {\r\n    throw new TypeError('argument tttGame is not an instance of TicTacToe')\r\n  }\r\n\r\n  const validMoves = tttGame.getValidMoves()\r\n  let validMove\r\n  do {\r\n    validMove = validMoves[Math.floor(Math.random() * validMoves.length)]\r\n  } while (validMove[0] === validMove[1]) // we discard movement from and to the same square\r\n  tttGame.doMove(validMove)\r\n}\r\n\r\nexport function doNegimaxMove(tttGame) {\r\n  if (!tttGame instanceof TicTacToe) {\r\n    throw new TypeError('argument tttGame is not an instance of TicTacToe')\r\n  }\r\n\r\n  const tttGameCopy = tttGame.from()\r\n  const maxDepth = tttGame.size < 5 ? 6 : 2\r\n  const validMove = getNegiMaxMove(tttGameCopy, 0, maxDepth)\r\n  if (Array.isArray(validMove)) {\r\n    tttGame.doMove(validMove[1])\r\n  } else {\r\n    console.log(\"AI is screwed... doing random move\")\r\n    doRandomMove(tttGame)\r\n  }\r\n  \r\n}\r\n\r\nfunction getNegiMaxMove(tttGame, depth, maxDepth) {\r\n\r\n  const validMoves = tttGame.getValidMoves()\r\n\r\n  const tieMoves = []\r\n\r\n  for (let i = 0; i < validMoves.length; i++) {\r\n    const score = scoreMove(tttGame.from(), validMoves[i])\r\n    if (score === tttGame.size) {\r\n      // this would be a win for me so I would go for it\r\n      return [tttGame.size, validMoves[i]]\r\n    } else {\r\n      // I'm not a winner by this move so better check what the opponent would do if I did this\r\n      if (depth + 1 < maxDepth) {\r\n        const tttGameCopy = tttGame.from()\r\n        tttGameCopy.doMove(validMoves[i])\r\n\r\n        const opponentMove = getNegiMaxMove(tttGameCopy, depth + 1, maxDepth)\r\n        if (Array.isArray(opponentMove)) {\r\n          // opponent does not seem to be able to win if I do this so we have a potential move\r\n          if (Math.abs(opponentMove[0]) < tttGame.size) {\r\n            tieMoves.push([-opponentMove[0], validMoves[i]]) // score is negated i.e negimax\r\n          }\r\n        } else {\r\n          // opponent has no valid moves this is good\r\n          return [tttGame.size, validMoves[i]]\r\n        }\r\n      } else {\r\n        // recursion depth met so we must take a chance on this\r\n        tieMoves.push([0, validMoves[i]])\r\n      }\r\n    }\r\n  }\r\n\r\n  // select a random move among the higest performing moves\r\n  tieMoves.sort((a, b) => b - a)\r\n  if (tieMoves.length > 1) {\r\n    while(tieMoves[0][0] !== tieMoves[tieMoves.length - 1][0]) {\r\n      tieMoves.pop()\r\n    }\r\n  }\r\n  return tieMoves[Math.floor(Math.random() * tieMoves.length)]\r\n}\r\n\r\nfunction scoreMove(tttGame, validMove) {\r\n  const playerSymbol = tttGame.getTurnSymbol()\r\n  tttGame.doMove(validMove)\r\n  return tttGame.getScore(playerSymbol)\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport { doNegimaxMove } from './tictactoe-ai'\r\nimport {TicTacToe} from './tictactoe.js'\r\n\r\nclass Zquare extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      value: null\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <button className=\"square\" onClick={() => this.props.onClick()}>\r\n        {this.props.value}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.size = 0 // decides the side 0 -> 3x3 etc\r\n    this.sizes = [[3, '3x3'], [5, '5x5'], [7, '7x7'], [9, '9x9']]\r\n    \r\n    this.state = this.getInitialState()\r\n\r\n    this.aiPlayerSymbol = this.state.game.getTurnSymbol(1)\r\n\r\n  }\r\n  renderSquare(i, doNada) {\r\n    return <Zquare value={this.state.game.getSquareSymbol(i)}\r\n             onClick={()=> doNada ? this.doNada() : this.handleClick(i)}\r\n             key={i}/>\r\n  }\r\n\r\n  doNada() {\r\n\r\n  }\r\n\r\n  constructState(game) {\r\n    return {game: game}\r\n  }\r\n\r\n  isPlayerTurn(game, playerSymbol) {\r\n    return game.getTurnSymbol() === playerSymbol\r\n  }\r\n  \r\n  handleClick(i) {\r\n    if (this.state.game.doMove(i)) {\r\n      \r\n      this.setState(this.constructState(this.state.game))\r\n\r\n      if (!this.state.game.checkWinner() && this.isPlayerTurn(this.state.game, this.aiPlayerSymbol)) {\r\n        const game = this.state.game\r\n        const thisObject = this\r\n        setTimeout( function () {\r\n          // now we do the \"ai\" move\r\n          //doRandomMove(game)\r\n          doNegimaxMove(game)\r\n          thisObject.setState(thisObject.constructState(thisObject.state.game))\r\n        }, 2000)\r\n      }\r\n    }\r\n  }\r\n  \r\n  renderRow(start, length, doNada) {\r\n    const range = [...Array(length).keys()]\r\n    return (\r\n       <div className=\"board-row\" key={start}>\r\n         { range.map((i) => this.renderSquare(start + i, doNada))}\r\n       </div>\r\n    )\r\n  }\r\n\r\n  getInitialState() {\r\n    return this.constructState(new TicTacToe(this.sizes[this.size][0]))\r\n  }\r\n\r\n  reset() {\r\n    this.setState(this.getInitialState())\r\n  }\r\n\r\n  setSize(size) {\r\n    for (let i = 0; i < this.sizes.length; i++) {\r\n      if (size === this.sizes[i][1]) {\r\n        this.size = i\r\n      }\r\n    }\r\n\r\n    this.setState(this.constructState(this.state.game))  // force a render, possibly the size should be a state\r\n  }\r\n\r\n  render() {\r\n    let status = `Turn: ${this.state.game.turn + 1} Next Player: ${this.state.game.getTurnSymbol()}`\r\n    const winner = this.state.game.checkWinner()\r\n    const size = this.state.game.size\r\n    if (winner) {\r\n      status = `Winner is: ${winner} at Turn: ${this.state.game.turn}`\r\n    }\r\n    const range = [...Array(size).keys()]\r\n    return (\r\n      <div>\r\n        <div className=\"status\">{status}</div>\r\n          { range.map((i) => this.renderRow(i * size, size, winner || this.isPlayerTurn(this.state.game, this.aiPlayerSymbol))) }\r\n\r\n          <div className=\"controls\">\r\n            <button onClick={() => this.reset()}>\r\n              Reset game\r\n            </button>\r\n            <select name=\"game_size\" value={this.sizes[this.size][1]} onChange={event => this.setSize(event.target.value)}>\r\n              {this.sizes.map(opt => {return(<option id=\"{opt[0]}\" key={opt[0]}>{opt[1]}</option>)})}\r\n            </select>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board size={'5x5'}/>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{/* status */}</div>\r\n          <ol>{/* TODO */}</ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}